(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{69:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",function(){return o}),n.d(t,"rightToc",function(){return i}),n.d(t,"default",function(){return p});n(0);var a=n(89);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o={id:"styling",title:"Styling"},i=[{value:"Inline Styles",id:"inline-styles",children:[]},{value:"Webpack CSS Processing (external CSS) and js.Dynamic",id:"webpack-css-processing-external-css-and-jsdynamic",children:[]},{value:"CSS in JS/Scala",id:"css-in-jsscala",children:[]}],l={rightToc:i},c="wrapper";function p(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(c,s({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Styling is a topic with many wide-ranging solutions. I suggest you check out the\n",Object(a.b)("a",s({parentName:"p"},{href:"http://appddeevvmeanderings.blogspot.com/2017/08/web-app-styling-interlude-how-to.html"}),"blog"),"\non how to think about the styling approach that will work for you."),Object(a.b)("p",null,"Generally, doing styling in the language, e.g. js or scala, allows you to\ncustomize the styling while still retaining most levels of performance. Heavy\nand complex styling will always require a complex process. Check out\n",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/japgolly/scalacss"}),"ScalaCSS")," or udash's version about scala\nspecific CSS-in-Scala solutions."),Object(a.b)("p",null,"Recommendation: Use a js-based library like uifabric's\n",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/merge-styles"}),"merge-styles"),"\nor ",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/threepointone/glamor"}),"glamor (javascript)"),"."),Object(a.b)("h2",null,Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"inline-styles"})),Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#inline-styles"}),"#"),"Inline Styles"),Object(a.b)("p",null,"If you are looking for something that mildly helps you detect errors, such as bad styling attribute names, you can use vdom's style for inline styles as described in that section. In addition, it also provides inline styles via"),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-scala"}),'import ttg.react.vdom.style._\nval style1 = new StyleAttr { display: "flex" }\nval style2 = new StyleAttr { flexDirection: "column" }\n\n// style2 takes precedence\nval flexVertical = merge(style1, style2)\n')),Object(a.b)("h2",null,Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"webpack-css-processing-external-css-and-jsdynamic"})),Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#webpack-css-processing-external-css-and-jsdynamic"}),"#"),"Webpack CSS Processing (external CSS) and js.Dynamic"),Object(a.b)("p",null,"Assuming you are using webpack or CSS processing, CSS import produces a\njs.Object whose keys are style names (sometimes mangled) and whose values are\nstyles. css-loader combined with style-loader then translates that into a\nstylesheet that is dynamically inserted into the DOM."),Object(a.b)("p",null,'To use that method, ensure webpack has an alias to the location of your CSS\nfiles. I tend to put my CSS files right next to the component and hence my\nwebpack alias "Styles", for example, points to my source directory. Then you can\nuse:'),Object(a.b)("pre",null,Object(a.b)("code",s({parentName:"pre"},{className:"language-scala"}),'@js.native\n@JSImport("Styles/somecomponentdir/component.css", JSImport.Namespace)\nobject cstylesns extends js.Object\n\n// put all imported styles into the same object\nobject styles {\n  val cstyles = cstylesns.asInstanceOf[js.Dynamic] // to make it easy, but not type-safe\n}\n\n// then import them all or ala carte\nimport styles._\n\n// use them\n// cstyles.root or cystyles.input\n')),Object(a.b)("p",null,"You could use something other than js.Dynamic but that involves potentially alot\nof typing."),Object(a.b)("h2",null,Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"anchor",id:"css-in-jsscala"})),Object(a.b)("a",s({parentName:"h2"},{"aria-hidden":!0,className:"hash-link",href:"#css-in-jsscala"}),"#"),"CSS in JS/Scala"),Object(a.b)("p",null,"This is becoming a much more preferred approach when the processing power of\nyour client allows to do this. While pre-processed and smartly bundled CSS can\ngive you load flexbility and performance benefits, the flexibility and sometimes\nnegligible impact on performance that current solutions provide make this more\npopular."),Object(a.b)("p",null,"There are some pure scala solutions available such as\n",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/japgolly/scalacss"}),"ScalaCSS")," as well as\n",Object(a.b)("a",s({parentName:"p"},{href:"https://udash.io/"}),"udash")," both of have CSS in Scala solutions, you have many\nchoices include ",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/threepointone/glamor"}),"glamor (javascript)"),"\nand something very similar such as fabric's styling\n(",Object(a.b)("a",s({parentName:"p"},{href:"https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/merge-styles"}),"merge-styles"),"). fabric's\nmerge-styles claims to be slightly smaller on the payload than glamor."),Object(a.b)("p",null,"You can use this style of style processing but if you do, you want to consider\ndefining your styles in JS and importing them as JS data. Then use a facade over\na CSS in JS library to add them once you have manipulated them as needed. You do\nnot gain type-safety with this approach but if you use typescript bindings in\ntypescript code, its probably good enough."))}p.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return u});var a=n(0),s=n.n(a),r=s.a.createContext({}),o=function(e){var t=s.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=o(e.components);return s.a.createElement(r.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){return s.a.createElement(s.a.Fragment,{},e.children)}},p=function(e){var t=e.components,n=e.mdxType,a=e.originalType,r=e.parentName,i=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),l=o(t);return s.a.createElement(l[r+"."+n]||l[n]||c[n]||a,t?Object.assign({},i,{components:t}):i)};function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);