# -*- mode: snippet -*-
# Author: aappddeevv
# name: scalajs-react reducer component, fabric styling
# key: styledreducer
# --
/**
 * Component ${1:enumerate}.
 */
object $1 {

  @js.native
  trait ClassNames extends IClassNamesTag {
    val root: String = js.native
  }

  trait Styles extends IStyleSetTag {
    var root: js.UndefOr[IStyle] = js.undefined
  }

  trait StyleProps extends js.Object {
    var className: js.UndefOr[String] = js.undefined
  }

  val getStyles: IStyleFunction[StyleProps, Styles] = 
    props => new Styles {
      root = stylearray(
        "your-$1",
        new IRawStyle {
        })
    }

  def getClassNames(ss: Styles) = Styling.mergeStyleSets[ClassNames](ss)
  
  $0sealed trait Action
  case class State()
  
  val Name = "$1"

  trait Props extends js.Object {
    var rootClassName: js.UndefOr[String] = js.undefined,
    var styles: js.UndefOr[IStyleFunctionOrObject[StyleProps, Styles]] = js.undefined
  }

  def apply(props: Props) = sfc(props)

  val sfc = SFC1[Props] { props =>
    val (state, dispatch) = React.useReducer[State, Action]((s,a) => {
       a match {
         case _ => s
       }
    })
    val cn = getClassNames(resolve[StyleProps, Styles](new StyleProps {
      className = rootClassName
    }, getStyles, styles))
    div("component $1")
  }
}
